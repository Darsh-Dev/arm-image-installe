#!/bin/bash


# usage message
usage() {
    echo "
Usage: `basename ${0}` <options>

   --target=TARGET  - target board
                      [${TARGETS}]
   --media=DEVICE   - media device file (/dev/[sdX|mmcblkX])
    -y              - Assumes yes, will not wait for confirmation
   --url=URL	    - Optional URL, Mastermirror used as default
   --ks=KICKSTART   - Optional kickstart to use for install
   --version        - Display version and exit

Example: `basename ${0}` --target=panda --media=/dev/mmcblk0"
}


DIR=`dirname $0`
BOARDDIR=boards.d
TARGETS=`ls -1 ${DIR}/${BOARDDIR}`
TARGETS=`echo ${TARGETS} | sed -e 's/[[:space:]]/|/g'`

# check the args
while [ $# -gt 0 ]; do
    case $1 in
        --debug)
            set -x
            ;;
        -h|--help)
            usage
            ;;
        --target*)
            if echo $1 | grep '=' >/dev/null ; then
                TARGET=`echo $1 | sed 's/^--target=//'`
            else
                TARGET=$2
                shift
            fi
            ;;
	--media*)
            if echo $1 | grep '=' >/dev/null ; then
                MEDIA=`echo $1 | sed 's/^--media=//'`
            else
                MEDIA=$2
                shift
            fi
            ;;
	--ks*)
            if echo $1 | grep '=' >/dev/null ; then
                KICKSTART=`echo $1 | sed 's/^--ks=//'`
            else
                KICKSTART=$2
                shift
            fi
            ;;
	--version)
            echo "`basename ${0}`-"$VERSION""
            exit 0
            ;;
        -y)
            NOASK=1
            ;;
	--url*)
	    if echo $1 | grep '=' >/dev/null ; then
		URL=`echo $1 | sed 's/^--url=//'`
	    else
		URL=$2
		shift
	    fi
            ;;
        *)
            echo "`basename ${0}`: Error - ${1}"
            usage
            exit 1
            ;;
        esac
    shift
done

# check if media is a block device
if [[ ! -b $MEDIA ]] ; then 
	echo "Missing media"
	usage
	exit 1
fi 

if [[ $TARGET = '' ]] ; then
	echo "Missing target"
	usage
	exit 1
fi

# check if url specified if not use mastermirror
if [[ $URL = '' ]] ; then
	URL="http://dl.fedoraproject.org/pub/fedora/linux/development/21/armhfp/os"
fi

# unmount media
echo "= Umounting $MEDIA."
sudo umount $MEDIA* &> /dev/null

# create partition 
echo "= Creating partition."
sudo parted -s $MEDIA mklabel msdos &> /dev/null
sudo parted -s -a optimal $MEDIA mkpart primary ext4 1 512 &> /dev/null

# check to make sure paritioning completed successfully
#if [[ $? != '0' ]] ; then 
#	echo ""
#	echo usage
#	exit 1
#fi

# re-read table
sudo partprobe $MEDIA

# check media type /dev/sdX or /dev/mmcblkX
case $MEDIA in
        "/dev/mmcblk"*)
                        PART1="${MEDIA}p1"
                        ;;
        *)
                        PART1="${MEDIA}1"
                        ;;
esac

# create filesystem
echo "= Creating filesystem."
sudo mkfs.ext4 $PART1 &> /dev/null

# create temp dir - using root to reuse boards.d and related uboot commands
echo "= Making temporary directories."
sudo rm -rf /tmp/{root,install-card}
mkdir /tmp/{root,install-card}
sudo mount $PART1 /tmp/install-card

# download files to temp dir
# get the latest uboot
#UBOOT=`koji latest-build f21 uboot-tools | awk '{print $1}' | grep uboot`
pushd /tmp/root &> /dev/null
koji download-build --arch=armv7hl --latestfrom=f21 uboot-tools
#wget http://192.168.0.80/linux/development/rawhide/armhfp/os/u/uboot-images-armv7*

# unpack uboot
rpm2cpio uboot-images*.rpm | cpio -idv &> /dev/null
popd &> /dev/null

# write uboot
# determine uboot and write to disk 
if [ "$TARGET" = "" ]; then
        echo "= No U-boot will be written."
        TARGET="Mystery Board"
else
        . "${DIR}/${BOARDDIR}/${TARGET}"
fi
# get pxe images and dtb files
pushd /tmp/install-card &> /dev/null
#sudo lftp http://192.168.0.80/linux/development/rawhide/armhfp/os/images/pxeboot/ <<<'glob get *; quit'
sudo wget $URL/images/pxeboot/vmlinuz
sudo wget $URL/images/pxeboot/initrd.img
popd &> /dev/null
sudo mkdir /tmp/install-card/dtb
pushd /tmp/install-card/dtb &> /dev/null
sudo lftp $URL/images/pxeboot/dtb/ <<<'glob get *; quit'
popd &> /dev/null
sudo mkdir -p /tmp/install-card/LiveOS
pushd /tmp/install-card/LiveOS
sudo wget $URL/LiveOS/squashfs.img
popd &> /dev/null

# inst.stage2=$URL
# make and populate the extlinux.conf
sudo mkdir /tmp/install-card/extlinux/
if [ "$KICKSTART" = "" ]; then
cat > /tmp/extlinux.conf << EOF
# extlinux.conf generated by appliance-creator
ui menu.c32
menu autoboot Welcome to Fedora 21 Installer for ARM. Automatic boot in # second{,s}. Press a key for options.
menu title Fedora 21 Installer for ARM Boot Options.
menu hidden
timeout 20
totaltimeout 600

label Fedora 21 Installer for ARM
	kernel /vmlinuz
	append inst.repo=$URL inst.ks=nfs:192.168.0.80:/var/exports/tftpboot/cubietruck-21-only-uboot.ks
	fdtdir /dtb/
	initrd /initrd.img

EOF
else
KS=`echo $KICKSTART | cut -d / -f 4`
cat > /tmp/extlinux.conf << EOF
# extlinux.conf generated by appliance-creator
ui menu.c32
menu autoboot Welcome to Fedora 21 Installer for ARM. Automatic boot in # second{,s}. Press a key for options.
menu title Fedora 21 Installer for ARM Boot Options.
menu hidden
timeout 20
totaltimeout 600

label Fedora 21 Installer for ARM
        kernel /vmlinuz
        append inst.ks=hd:mmcblk0p1:/$KS ip=eth0:dhcp
        fdtdir /dtb/
        initrd /initrd.img
EOF
sudo cp $KICKSTART /tmp/install-card/
fi
sudo mv /tmp/extlinux.conf /tmp/install-card/extlinux/
sync
sudo umount $MEDIA* &> /dev/null
echo "= Complete!"
